// <auto-generated />
using System;
using Daystride.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Daystride.Migrations
{
    [DbContext(typeof(DayStrideContext))]
    [Migration("20240426222742_MoodEventsAdded")]
    partial class MoodEventsAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.MoodEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("MoodId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoodId");

                    b.ToTable("MoodEvents");
                });

            modelBuilder.Entity("API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Daystride.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("GoalPeriodTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeRangesId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("GoalPeriodTypeId");

                    b.HasIndex("TimeRangesId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Daystride.Models.ActivityCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActivityCategoryName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ActivityCategories");
                });

            modelBuilder.Entity("Daystride.Models.ActivityType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActivityTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ActivityTypes");
                });

            modelBuilder.Entity("Daystride.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ColorCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Daystride.Models.Date", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date1")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.HasKey("Id");

                    b.ToTable("Dates");
                });

            modelBuilder.Entity("Daystride.Models.GoalPeriodType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GoalPeriodName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("GoalPeriodTypes");
                });

            modelBuilder.Entity("Daystride.Models.Mood", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("MoodName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("Daystride.Models.TimeRange", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("TimeRange1")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TimeRange");

                    b.HasKey("Id");

                    b.ToTable("TimeRanges");
                });

            modelBuilder.Entity("Daystride.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("UnitName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Daystride.Models.UserDate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("DateId")
                        .HasColumnType("int");

                    b.Property<int?>("MoodId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("DateId");

                    b.HasIndex("MoodId");

                    b.ToTable("UserDates");
                });

            modelBuilder.Entity("Daystride.Models.UsersActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrentCount")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("Goal")
                        .HasColumnType("int");

                    b.Property<int?>("GoalPeriodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReminderMessage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TimeRangeId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("GoalPeriodTypeId");

                    b.HasIndex("TimeRangeId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("UsersActivities");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3131d140-a4a6-4b50-9240-09fabf85d984",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "593182d4-58b8-4c8a-a8f8-32e7cd34f3bd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Models.MoodEvent", b =>
                {
                    b.HasOne("Daystride.Models.Mood", "Mood")
                        .WithMany("MoodEvents")
                        .HasForeignKey("MoodId")
                        .HasConstraintName("FK_MoodEvents_Moods");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("Daystride.Models.Activity", b =>
                {
                    b.HasOne("Daystride.Models.ActivityCategory", "Category")
                        .WithMany("Activities")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Activities_ActivityCategories");

                    b.HasOne("Daystride.Models.Color", "Color")
                        .WithMany("Activities")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Activities_Colors");

                    b.HasOne("Daystride.Models.GoalPeriodType", "GoalPeriodType")
                        .WithMany("Activities")
                        .HasForeignKey("GoalPeriodTypeId")
                        .HasConstraintName("FK_Activities_GoalPeriodTypes");

                    b.HasOne("Daystride.Models.TimeRange", "TimeRanges")
                        .WithMany("Activities")
                        .HasForeignKey("TimeRangesId")
                        .HasConstraintName("FK_Activities_TimeRanges");

                    b.HasOne("Daystride.Models.ActivityType", "Type")
                        .WithMany("Activities")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Activities_ActivityTypes");

                    b.HasOne("Daystride.Models.Unit", "Unit")
                        .WithMany("Activities")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Activities_Units");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("GoalPeriodType");

                    b.Navigation("TimeRanges");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Daystride.Models.UserDate", b =>
                {
                    b.HasOne("Daystride.Models.Activity", "Activity")
                        .WithMany("UserDates")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_UserDates_Activities");

                    b.HasOne("Daystride.Models.Date", "Date")
                        .WithMany("UserDates")
                        .HasForeignKey("DateId")
                        .HasConstraintName("FK_UserDates_Dates");

                    b.HasOne("Daystride.Models.Mood", "Mood")
                        .WithMany("UserDates")
                        .HasForeignKey("MoodId")
                        .HasConstraintName("FK_UserDates_Moods");

                    b.Navigation("Activity");

                    b.Navigation("Date");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("Daystride.Models.UsersActivity", b =>
                {
                    b.HasOne("Daystride.Models.ActivityCategory", "Category")
                        .WithMany("UsersActivities")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_UsersActivities_ActivityCategories");

                    b.HasOne("Daystride.Models.Color", "Color")
                        .WithMany("UsersActivities")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_UsersActivities_Colors");

                    b.HasOne("Daystride.Models.GoalPeriodType", "GoalPeriodType")
                        .WithMany("UsersActivities")
                        .HasForeignKey("GoalPeriodTypeId")
                        .HasConstraintName("FK_UsersActivities_GoalPeriodTypes");

                    b.HasOne("Daystride.Models.TimeRange", "TimeRange")
                        .WithMany("UsersActivities")
                        .HasForeignKey("TimeRangeId")
                        .HasConstraintName("FK_UsersActivities_TimeRanges");

                    b.HasOne("Daystride.Models.ActivityType", "Type")
                        .WithMany("UsersActivities")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_UsersActivities_ActivityTypes");

                    b.HasOne("Daystride.Models.Unit", "Unit")
                        .WithMany("UsersActivities")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_UsersActivities_Units");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("GoalPeriodType");

                    b.Navigation("TimeRange");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Daystride.Models.Activity", b =>
                {
                    b.Navigation("UserDates");
                });

            modelBuilder.Entity("Daystride.Models.ActivityCategory", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UsersActivities");
                });

            modelBuilder.Entity("Daystride.Models.ActivityType", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UsersActivities");
                });

            modelBuilder.Entity("Daystride.Models.Color", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UsersActivities");
                });

            modelBuilder.Entity("Daystride.Models.Date", b =>
                {
                    b.Navigation("UserDates");
                });

            modelBuilder.Entity("Daystride.Models.GoalPeriodType", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UsersActivities");
                });

            modelBuilder.Entity("Daystride.Models.Mood", b =>
                {
                    b.Navigation("MoodEvents");

                    b.Navigation("UserDates");
                });

            modelBuilder.Entity("Daystride.Models.TimeRange", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UsersActivities");
                });

            modelBuilder.Entity("Daystride.Models.Unit", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("UsersActivities");
                });
#pragma warning restore 612, 618
        }
    }
}
